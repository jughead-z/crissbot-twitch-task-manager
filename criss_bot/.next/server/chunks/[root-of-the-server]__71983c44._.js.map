{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Raito/documents/github/twitch-task-bot-next/criss_bot/src/app/api/socket/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { Server as SocketIOServer } from \"socket.io\";\r\nimport { createServer } from \"http\";\r\nimport { ServerToClientEvents, ClientToServerEvents } from \"@/types\";\r\n\r\n// Global variable to store the Socket.io server\r\nlet io: SocketIOServer<ClientToServerEvents, ServerToClientEvents> | null =\r\n  null;\r\n\r\nexport async function GET(request: NextRequest) {\r\n  if (!io) {\r\n    console.log(\"🔌 Initializing Socket.io server...\");\r\n\r\n    // Create HTTP server for Socket.io\r\n    const httpServer = createServer();\r\n\r\n    io = new SocketIOServer<ClientToServerEvents, ServerToClientEvents>(\r\n      httpServer,\r\n      {\r\n        path: \"/api/socket\",\r\n        cors: {\r\n          origin: \"*\",\r\n          methods: [\"GET\", \"POST\"],\r\n        },\r\n        addTrailingSlash: false,\r\n      }\r\n    );\r\n\r\n    // Socket connection handling\r\n    io.on(\"connection\", (socket) => {\r\n      console.log(\"✅ Client connected:\", socket.id);\r\n\r\n      socket.on(\"disconnect\", (reason) => {\r\n        console.log(\"❌ Client disconnected:\", socket.id, \"Reason:\", reason);\r\n      });\r\n    });\r\n\r\n    // Start the server on a different port for Socket.io\r\n    const PORT = parseInt(process.env.SOCKET_PORT || \"3001\");\r\n    httpServer.listen(PORT, () => {\r\n      console.log(`✅ Socket.io server running on port ${PORT}`);\r\n    });\r\n\r\n    console.log(\"✅ Socket.io server initialized\");\r\n  }\r\n\r\n  return NextResponse.json({\r\n    success: true,\r\n    message: \"Socket.io server initialized\",\r\n    socketPath: \"/api/socket\",\r\n  });\r\n}\r\n\r\n// Export the io instance for use in other API routes\r\nexport function getSocketIO(): SocketIOServer<\r\n  ClientToServerEvents,\r\n  ServerToClientEvents\r\n> | null {\r\n  return io;\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAGA,gDAAgD;AAChD,IAAI,KACF;AAEK,eAAe,IAAI,OAAoB;IAC5C,IAAI,CAAC,IAAI;QACP,QAAQ,GAAG,CAAC;QAEZ,mCAAmC;QACnC,MAAM,aAAa,CAAA,GAAA,iGAAA,CAAA,eAAY,AAAD;QAE9B,KAAK,IAAI,0IAAA,CAAA,SAAc,CACrB,YACA;YACE,MAAM;YACN,MAAM;gBACJ,QAAQ;gBACR,SAAS;oBAAC;oBAAO;iBAAO;YAC1B;YACA,kBAAkB;QACpB;QAGF,6BAA6B;QAC7B,GAAG,EAAE,CAAC,cAAc,CAAC;YACnB,QAAQ,GAAG,CAAC,uBAAuB,OAAO,EAAE;YAE5C,OAAO,EAAE,CAAC,cAAc,CAAC;gBACvB,QAAQ,GAAG,CAAC,0BAA0B,OAAO,EAAE,EAAE,WAAW;YAC9D;QACF;QAEA,qDAAqD;QACrD,MAAM,OAAO,SAAS,QAAQ,GAAG,CAAC,WAAW,IAAI;QACjD,WAAW,MAAM,CAAC,MAAM;YACtB,QAAQ,GAAG,CAAC,CAAC,mCAAmC,EAAE,MAAM;QAC1D;QAEA,QAAQ,GAAG,CAAC;IACd;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QACvB,SAAS;QACT,SAAS;QACT,YAAY;IACd;AACF;AAGO,SAAS;IAId,OAAO;AACT","debugId":null}}]
}