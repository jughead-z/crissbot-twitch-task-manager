{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Raito/Documents/GitHub/twitch-task-bot-next/criss_bot/src/app/api/tasks/%5Bid%5D/done/route.ts"],"sourcesContent":["// criss_bot/src/app/api/tasks/[id]/done/route.ts\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport { readFileSync, writeFileSync, existsSync, mkdirSync } from \"fs\";\r\nimport path from \"path\";\r\n\r\ninterface Task {\r\n  id: number;\r\n  text: string;\r\n  username: string;\r\n  status: \"pending\" | \"done\";\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  completed?: boolean;\r\n  completedAt?: string;\r\n}\r\n\r\nconst TASKS_FILE = path.join(process.cwd(), \"data\", \"tasks.json\");\r\n\r\n// Ensure data directory exists\r\nfunction ensureDataDirectory() {\r\n  const dataDir = path.dirname(TASKS_FILE);\r\n  if (!existsSync(dataDir)) {\r\n    mkdirSync(dataDir, { recursive: true });\r\n  }\r\n}\r\n\r\n// Read tasks from file\r\nfunction readTasks(): Task[] {\r\n  ensureDataDirectory();\r\n\r\n  if (!existsSync(TASKS_FILE)) {\r\n    return [];\r\n  }\r\n\r\n  try {\r\n    const data = readFileSync(TASKS_FILE, \"utf8\");\r\n    return JSON.parse(data);\r\n  } catch (error) {\r\n    console.error(\"Error reading tasks file:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Write tasks to file\r\nfunction writeTasks(tasks: Task[]) {\r\n  ensureDataDirectory();\r\n\r\n  try {\r\n    writeFileSync(TASKS_FILE, JSON.stringify(tasks, null, 2));\r\n  } catch (error) {\r\n    console.error(\"Error writing tasks file:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function PUT(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    const taskId = parseInt(params.id);\r\n    const body = await request.json();\r\n    const { username } = body;\r\n\r\n    if (!username) {\r\n      return NextResponse.json(\r\n        { success: false, error: \"Username is required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const tasks = readTasks();\r\n    const taskIndex = tasks.findIndex((task) => task.id === taskId);\r\n\r\n    if (taskIndex === -1) {\r\n      return NextResponse.json(\r\n        { success: false, error: \"Task not found\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    const task = tasks[taskIndex];\r\n\r\n    // Check if user owns the task\r\n    if (task.username !== username) {\r\n      return NextResponse.json(\r\n        { success: false, error: \"You can only complete your own tasks\" },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    // Mark task as completed\r\n    tasks[taskIndex] = {\r\n      ...task,\r\n      status: \"done\",\r\n      completed: true,\r\n      completedAt: new Date().toISOString(),\r\n    };\r\n\r\n    writeTasks(tasks);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: tasks[taskIndex],\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error marking task as done:\", error);\r\n    return NextResponse.json(\r\n      { success: false, error: \"Internal server error\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,iDAAiD;;;;AACjD;AACA;AACA;;;;AAaA,MAAM,aAAa,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ;AAEpD,+BAA+B;AAC/B,SAAS;IACP,MAAM,UAAU,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC;IAC7B,IAAI,CAAC,CAAA,GAAA,6FAAA,CAAA,aAAU,AAAD,EAAE,UAAU;QACxB,CAAA,GAAA,6FAAA,CAAA,YAAS,AAAD,EAAE,SAAS;YAAE,WAAW;QAAK;IACvC;AACF;AAEA,uBAAuB;AACvB,SAAS;IACP;IAEA,IAAI,CAAC,CAAA,GAAA,6FAAA,CAAA,aAAU,AAAD,EAAE,aAAa;QAC3B,OAAO,EAAE;IACX;IAEA,IAAI;QACF,MAAM,OAAO,CAAA,GAAA,6FAAA,CAAA,eAAY,AAAD,EAAE,YAAY;QACtC,OAAO,KAAK,KAAK,CAAC;IACpB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,EAAE;IACX;AACF;AAEA,sBAAsB;AACtB,SAAS,WAAW,KAAa;IAC/B;IAEA,IAAI;QACF,CAAA,GAAA,6FAAA,CAAA,gBAAa,AAAD,EAAE,YAAY,KAAK,SAAS,CAAC,OAAO,MAAM;IACxD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM;IACR;AACF;AAEO,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,MAAM,SAAS,SAAS,OAAO,EAAE;QACjC,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,QAAQ,EAAE,GAAG;QAErB,IAAI,CAAC,UAAU;YACb,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAAuB,GAChD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,QAAQ;QACd,MAAM,YAAY,MAAM,SAAS,CAAC,CAAC,OAAS,KAAK,EAAE,KAAK;QAExD,IAAI,cAAc,CAAC,GAAG;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAAiB,GAC1C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,OAAO,KAAK,CAAC,UAAU;QAE7B,8BAA8B;QAC9B,IAAI,KAAK,QAAQ,KAAK,UAAU;YAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAAuC,GAChE;gBAAE,QAAQ;YAAI;QAElB;QAEA,yBAAyB;QACzB,KAAK,CAAC,UAAU,GAAG;YACjB,GAAG,IAAI;YACP,QAAQ;YACR,WAAW;YACX,aAAa,IAAI,OAAO,WAAW;QACrC;QAEA,WAAW;QAEX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM,KAAK,CAAC,UAAU;QACxB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAAwB,GACjD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}