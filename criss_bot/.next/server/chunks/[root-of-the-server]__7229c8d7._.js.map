{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Raito/Documents/GitHub/twitch-task-bot-next/criss_bot/src/app/api/pomodoro/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { Server as SocketIOServer } from \"socket.io\";\r\nimport { createServer } from \"http\";\r\n\r\n// In-memory Pomodoro state (in production, use a database)\r\nlet pomodoroState = {\r\n  timeLeft: 1500, // 25 minutes in seconds\r\n  isActive: false,\r\n  mode: \"work\" as \"work\" | \"shortBreak\" | \"longBreak\",\r\n  session: 1,\r\n  initiatedBy: null as string | null,\r\n  nextBreakType: \"short\" as \"short\" | \"long\",\r\n  startTime: null as number | null,\r\n  pausedAt: null as number | null,\r\n  totalPausedTime: 0,\r\n};\r\n\r\n// Timer interval\r\nlet pomodoroInterval: NodeJS.Timeout | null = null;\r\n\r\n// Socket.io instance (if needed for real-time updates)\r\nlet io: SocketIOServer | null = null;\r\n\r\n// GET - Get current Pomodoro status with real-time calculation\r\nexport async function GET() {\r\n  try {\r\n    // If timer is active, calculate current time left based on elapsed time\r\n    if (pomodoroState.isActive && pomodoroState.startTime) {\r\n      const now = Date.now();\r\n      const totalPausedTime =\r\n        pomodoroState.totalPausedTime +\r\n        (pomodoroState.pausedAt ? now - pomodoroState.pausedAt : 0);\r\n\r\n      const elapsed = Math.floor(\r\n        (now - pomodoroState.startTime - totalPausedTime) / 1000\r\n      );\r\n\r\n      // Get original duration based on mode\r\n      let originalDuration: number;\r\n      switch (pomodoroState.mode) {\r\n        case \"work\":\r\n          originalDuration = 25 * 60; // 25 minutes\r\n          break;\r\n        case \"shortBreak\":\r\n          originalDuration = 10 * 60; // 10 minutes\r\n          break;\r\n        case \"longBreak\":\r\n          originalDuration = 15 * 60; // 15 minutes\r\n          break;\r\n        default:\r\n          originalDuration = 25 * 60;\r\n      }\r\n\r\n      pomodoroState.timeLeft = Math.max(0, originalDuration - elapsed);\r\n\r\n      // Check if timer finished\r\n      if (pomodoroState.timeLeft <= 0) {\r\n        await handleTimerComplete();\r\n      }\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        ...pomodoroState,\r\n        timeLeft: Math.max(0, Math.floor(pomodoroState.timeLeft)), // Ensure integer seconds\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error getting Pomodoro status:\", error);\r\n    return NextResponse.json(\r\n      { success: false, error: \"Failed to get Pomodoro status\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// POST - Start Pomodoro timer\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { username, duration = 25 } = body;\r\n\r\n    if (!username) {\r\n      return NextResponse.json(\r\n        { success: false, error: \"Username is required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Validate duration (1-120 minutes)\r\n    if (duration < 1 || duration > 120) {\r\n      return NextResponse.json(\r\n        { success: false, error: \"Duration must be between 1-120 minutes\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Stop existing timer\r\n    if (pomodoroInterval) {\r\n      clearInterval(pomodoroInterval);\r\n    }\r\n\r\n    // Set new timer state\r\n    const durationInSeconds = duration * 60;\r\n    pomodoroState = {\r\n      timeLeft: durationInSeconds,\r\n      isActive: true,\r\n      mode: \"work\",\r\n      session: pomodoroState.session,\r\n      initiatedBy: username,\r\n      nextBreakType: pomodoroState.session % 4 === 0 ? \"long\" : \"short\",\r\n      startTime: Date.now(),\r\n      pausedAt: null,\r\n      totalPausedTime: 0,\r\n    };\r\n\r\n    // Start countdown interval (updates every second)\r\n    startPomodoroInterval();\r\n\r\n    // Emit update via Socket.io if available\r\n    if (io) {\r\n      io.emit(\"pomodoroUpdate\", pomodoroState);\r\n    }\r\n\r\n    console.log(`🍅 Pomodoro started by ${username}: ${duration} minutes`);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: pomodoroState,\r\n      message: `Pomodoro started for ${duration} minutes`,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error starting Pomodoro:\", error);\r\n    return NextResponse.json(\r\n      { success: false, error: \"Failed to start Pomodoro\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Start the countdown interval\r\nfunction startPomodoroInterval() {\r\n  if (pomodoroInterval) {\r\n    clearInterval(pomodoroInterval);\r\n  }\r\n\r\n  pomodoroInterval = setInterval(() => {\r\n    if (!pomodoroState.isActive || !pomodoroState.startTime) {\r\n      return;\r\n    }\r\n\r\n    const now = Date.now();\r\n    const elapsed = Math.floor(\r\n      (now - pomodoroState.startTime - pomodoroState.totalPausedTime) / 1000\r\n    );\r\n    const originalDuration =\r\n      pomodoroState.mode === \"work\"\r\n        ? 25 * 60\r\n        : pomodoroState.mode === \"shortBreak\"\r\n        ? 10 * 60\r\n        : 15 * 60;\r\n\r\n    pomodoroState.timeLeft = Math.max(0, originalDuration - elapsed);\r\n\r\n    // Emit real-time update\r\n    if (io) {\r\n      io.emit(\"pomodoroUpdate\", {\r\n        ...pomodoroState,\r\n        timeLeft: pomodoroState.timeLeft,\r\n      });\r\n    }\r\n\r\n    // Check if timer completed\r\n    if (pomodoroState.timeLeft <= 0) {\r\n      handleTimerComplete();\r\n    }\r\n  }, 1000); // Update every second for accurate display\r\n}\r\n\r\n// Handle timer completion\r\nasync function handleTimerComplete() {\r\n  if (pomodoroInterval) {\r\n    clearInterval(pomodoroInterval);\r\n    pomodoroInterval = null;\r\n  }\r\n\r\n  const wasWorkSession = pomodoroState.mode === \"work\";\r\n\r\n  if (wasWorkSession) {\r\n    // Work session completed, start break\r\n    const isLongBreak = pomodoroState.session % 4 === 0;\r\n    const breakDuration = isLongBreak ? 15 * 60 : 10 * 60; // 15 or 10 minutes in seconds\r\n\r\n    pomodoroState = {\r\n      ...pomodoroState,\r\n      timeLeft: breakDuration,\r\n      mode: isLongBreak ? \"longBreak\" : \"shortBreak\",\r\n      isActive: true, // Auto-start break\r\n      startTime: Date.now(),\r\n      pausedAt: null,\r\n      totalPausedTime: 0,\r\n    };\r\n\r\n    console.log(\r\n      `🎉 Work session ${pomodoroState.session} completed! Starting ${\r\n        isLongBreak ? \"long\" : \"short\"\r\n      } break.`\r\n    );\r\n\r\n    // Start break timer\r\n    startPomodoroInterval();\r\n  } else {\r\n    // Break completed, stop timer (user decides when to start work)\r\n    pomodoroState = {\r\n      ...pomodoroState,\r\n      timeLeft: 25 * 60, // Reset to 25 minutes\r\n      mode: \"work\",\r\n      isActive: false,\r\n      session: pomodoroState.session + 1,\r\n      startTime: null,\r\n      pausedAt: null,\r\n      totalPausedTime: 0,\r\n      nextBreakType: (pomodoroState.session + 1) % 4 === 0 ? \"long\" : \"short\",\r\n    };\r\n\r\n    console.log(\r\n      `✨ Break completed! Ready for work session ${pomodoroState.session}.`\r\n    );\r\n  }\r\n\r\n  // Emit completion update\r\n  if (io) {\r\n    io.emit(\"pomodoroUpdate\", pomodoroState);\r\n    io.emit(\"pomodoroComplete\", {\r\n      type: wasWorkSession ? \"work\" : \"break\",\r\n      session: pomodoroState.session,\r\n      nextMode: pomodoroState.mode,\r\n    });\r\n  }\r\n}\r\n\r\n// Export the pomodoro state and control functions for use by control API\r\nexport { pomodoroState, startPomodoroInterval, handleTimerComplete };\r\n"],"names":[],"mappings":"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","debugId":null}}]
}