{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Raito/documents/github/twitch-task-bot-next/criss_bot/src/app/api/tasks/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { promises as fs } from \"fs\";\r\nimport path from \"path\";\r\n\r\ninterface Task {\r\n  id: number; // Changed to number\r\n  text: string;\r\n  username: string;\r\n  status: \"pending\" | \"done\";\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nconst TASKS_FILE = path.join(process.cwd(), \"data\", \"tasks.json\");\r\n\r\n// Ensure data directory exists\r\nasync function ensureDataDirectory() {\r\n  const dataDir = path.dirname(TASKS_FILE);\r\n  try {\r\n    await fs.access(dataDir);\r\n  } catch {\r\n    await fs.mkdir(dataDir, { recursive: true });\r\n  }\r\n}\r\n\r\n// Load tasks from file\r\nasync function loadTasks(): Promise<Task[]> {\r\n  try {\r\n    await ensureDataDirectory();\r\n    const data = await fs.readFile(TASKS_FILE, \"utf8\");\r\n    return JSON.parse(data);\r\n  } catch (error) {\r\n    console.log(\"üìÅ No existing data file, creating with defaults\");\r\n    return [];\r\n  }\r\n}\r\n\r\n// Save tasks to file\r\nasync function saveTasks(tasks: Task[]): Promise<void> {\r\n  await ensureDataDirectory();\r\n  await fs.writeFile(TASKS_FILE, JSON.stringify(tasks, null, 2));\r\n}\r\n\r\n// Generate next numeric ID\r\nfunction getNextId(tasks: Task[]): number {\r\n  if (tasks.length === 0) return 1;\r\n  const maxId = Math.max(...tasks.map((task) => task.id));\r\n  return maxId + 1;\r\n}\r\n\r\n// GET - Get all tasks\r\nexport async function GET() {\r\n  try {\r\n    const tasks = await loadTasks();\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: tasks,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error loading tasks:\", error);\r\n    return NextResponse.json(\r\n      { success: false, error: \"Failed to load tasks\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// POST - Create new task\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { text, username } = body;\r\n\r\n    if (!text || !username) {\r\n      return NextResponse.json(\r\n        { success: false, error: \"Text and username are required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (text.length > 200) {\r\n      return NextResponse.json(\r\n        { success: false, error: \"Task text too long (max 200 characters)\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const tasks = await loadTasks();\r\n    const newTask: Task = {\r\n      id: getNextId(tasks), // Numeric ID: 1, 2, 3, etc.\r\n      text: text.trim(),\r\n      username: username.toLowerCase(),\r\n      status: \"pending\",\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n    };\r\n\r\n    tasks.push(newTask);\r\n    await saveTasks(tasks);\r\n\r\n    console.log(`üìù New task created: #${newTask.id} by ${username}`);\r\n\r\n    return NextResponse.json(\r\n      {\r\n        success: true,\r\n        data: newTask,\r\n      },\r\n      { status: 201 }\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Error creating task:\", error);\r\n    return NextResponse.json(\r\n      { success: false, error: \"Failed to create task\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAWA,MAAM,aAAa,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ;AAEpD,+BAA+B;AAC/B,eAAe;IACb,MAAM,UAAU,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC;IAC7B,IAAI;QACF,MAAM,6FAAA,CAAA,WAAE,CAAC,MAAM,CAAC;IAClB,EAAE,OAAM;QACN,MAAM,6FAAA,CAAA,WAAE,CAAC,KAAK,CAAC,SAAS;YAAE,WAAW;QAAK;IAC5C;AACF;AAEA,uBAAuB;AACvB,eAAe;IACb,IAAI;QACF,MAAM;QACN,MAAM,OAAO,MAAM,6FAAA,CAAA,WAAE,CAAC,QAAQ,CAAC,YAAY;QAC3C,OAAO,KAAK,KAAK,CAAC;IACpB,EAAE,OAAO,OAAO;QACd,QAAQ,GAAG,CAAC;QACZ,OAAO,EAAE;IACX;AACF;AAEA,qBAAqB;AACrB,eAAe,UAAU,KAAa;IACpC,MAAM;IACN,MAAM,6FAAA,CAAA,WAAE,CAAC,SAAS,CAAC,YAAY,KAAK,SAAS,CAAC,OAAO,MAAM;AAC7D;AAEA,2BAA2B;AAC3B,SAAS,UAAU,KAAa;IAC9B,IAAI,MAAM,MAAM,KAAK,GAAG,OAAO;IAC/B,MAAM,QAAQ,KAAK,GAAG,IAAI,MAAM,GAAG,CAAC,CAAC,OAAS,KAAK,EAAE;IACrD,OAAO,QAAQ;AACjB;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,QAAQ,MAAM;QAEpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;QACR;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAAuB,GAChD;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG;QAE3B,IAAI,CAAC,QAAQ,CAAC,UAAU;YACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAAiC,GAC1D;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,KAAK,MAAM,GAAG,KAAK;YACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAA0C,GACnE;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,QAAQ,MAAM;QACpB,MAAM,UAAgB;YACpB,IAAI,UAAU;YACd,MAAM,KAAK,IAAI;YACf,UAAU,SAAS,WAAW;YAC9B,QAAQ;YACR,WAAW,IAAI,OAAO,WAAW;YACjC,WAAW,IAAI,OAAO,WAAW;QACnC;QAEA,MAAM,IAAI,CAAC;QACX,MAAM,UAAU;QAEhB,QAAQ,GAAG,CAAC,CAAC,sBAAsB,EAAE,QAAQ,EAAE,CAAC,IAAI,EAAE,UAAU;QAEhE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,MAAM;QACR,GACA;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAAwB,GACjD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}