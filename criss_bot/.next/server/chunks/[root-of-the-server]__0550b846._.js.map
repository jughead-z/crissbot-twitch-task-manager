{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Raito/Documents/GitHub/twitch-task-bot-next/criss_bot/src/lib/storage.ts"],"sourcesContent":["import fs from \"fs/promises\";\r\nimport path from \"path\";\r\nimport { Task, PomodoroState, StoredData } from \"@/types\";\r\n\r\nconst DATA_FILE = path.join(process.cwd(), \"data\", \"criss_bot_data.json\");\r\n\r\n// Default data structure\r\nconst defaultData: StoredData = {\r\n  tasks: [],\r\n  taskCounter: 1,\r\n  pomodoro: {\r\n    isActive: false,\r\n    timeLeft: 25 * 60, // 25 minutes in seconds\r\n    mode: \"work\",\r\n    session: 1,\r\n    startTime: null,\r\n    initiatedBy: null,\r\n    autoBreaks: true,\r\n  },\r\n};\r\n\r\n// Ensure data directory exists\r\nasync function ensureDataDirectory(): Promise<void> {\r\n  const dataDir = path.dirname(DATA_FILE);\r\n  try {\r\n    await fs.access(dataDir);\r\n  } catch {\r\n    await fs.mkdir(dataDir, { recursive: true });\r\n  }\r\n}\r\n\r\n// Load data from file\r\nexport async function loadData(): Promise<StoredData> {\r\n  try {\r\n    await ensureDataDirectory();\r\n    const fileContent = await fs.readFile(DATA_FILE, \"utf-8\");\r\n    const data = JSON.parse(fileContent) as StoredData;\r\n\r\n    // Merge with defaults to handle missing properties\r\n    return {\r\n      ...defaultData,\r\n      ...data,\r\n      pomodoro: {\r\n        ...defaultData.pomodoro,\r\n        ...data.pomodoro,\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.log(\"üìÅ No existing data file, creating with defaults\");\r\n    await saveData(defaultData);\r\n    return defaultData;\r\n  }\r\n}\r\n\r\n// Save data to file\r\nexport async function saveData(data: StoredData): Promise<void> {\r\n  try {\r\n    await ensureDataDirectory();\r\n    await fs.writeFile(DATA_FILE, JSON.stringify(data, null, 2), \"utf-8\");\r\n  } catch (error) {\r\n    console.error(\"‚ùå Error saving data:\", error);\r\n    throw new Error(\"Failed to save data\");\r\n  }\r\n}\r\n\r\n// Task-specific operations\r\nexport async function getAllTasks(): Promise<Task[]> {\r\n  const data = await loadData();\r\n  return data.tasks;\r\n}\r\n\r\nexport async function addTask(task: Omit<Task, \"id\">): Promise<Task> {\r\n  const data = await loadData();\r\n  const newTask: Task = {\r\n    ...task,\r\n    id: `task_${data.taskCounter}`,\r\n  };\r\n\r\n  data.tasks.push(newTask);\r\n  data.taskCounter += 1;\r\n\r\n  await saveData(data);\r\n  return newTask;\r\n}\r\n\r\nexport async function updateTask(\r\n  id: string,\r\n  updates: Partial<Task>\r\n): Promise<Task | null> {\r\n  const data = await loadData();\r\n  const taskIndex = data.tasks.findIndex((task) => task.id === id);\r\n\r\n  if (taskIndex === -1) {\r\n    return null;\r\n  }\r\n\r\n  data.tasks[taskIndex] = {\r\n    ...data.tasks[taskIndex],\r\n    ...updates,\r\n    updatedAt: new Date().toISOString(),\r\n  };\r\n\r\n  await saveData(data);\r\n  return data.tasks[taskIndex];\r\n}\r\n\r\nexport async function deleteTask(id: string): Promise<Task | null> {\r\n  const data = await loadData();\r\n  const taskIndex = data.tasks.findIndex((task) => task.id === id);\r\n\r\n  if (taskIndex === -1) {\r\n    return null;\r\n  }\r\n\r\n  const deletedTask = data.tasks.splice(taskIndex, 1)[0];\r\n  await saveData(data);\r\n  return deletedTask;\r\n}\r\n\r\nexport async function clearCompletedTasks(): Promise<Task[]> {\r\n  const data = await loadData();\r\n  const completedTasks = data.tasks.filter((task) => task.status === \"done\");\r\n  data.tasks = data.tasks.filter((task) => task.status !== \"done\");\r\n\r\n  await saveData(data);\r\n  return completedTasks;\r\n}\r\n\r\n// Pomodoro-specific operations\r\nexport async function getPomodoroState(): Promise<PomodoroState> {\r\n  const data = await loadData();\r\n  return data.pomodoro;\r\n}\r\n\r\nexport async function updatePomodoroState(\r\n  updates: Partial<PomodoroState>\r\n): Promise<PomodoroState> {\r\n  const data = await loadData();\r\n  data.pomodoro = {\r\n    ...data.pomodoro,\r\n    ...updates,\r\n  };\r\n\r\n  await saveData(data);\r\n  return data.pomodoro;\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;AACA;;;AAGA,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ;AAEnD,yBAAyB;AACzB,MAAM,cAA0B;IAC9B,OAAO,EAAE;IACT,aAAa;IACb,UAAU;QACR,UAAU;QACV,UAAU,KAAK;QACf,MAAM;QACN,SAAS;QACT,WAAW;QACX,aAAa;QACb,YAAY;IACd;AACF;AAEA,+BAA+B;AAC/B,eAAe;IACb,MAAM,UAAU,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC;IAC7B,IAAI;QACF,MAAM,qHAAA,CAAA,UAAE,CAAC,MAAM,CAAC;IAClB,EAAE,OAAM;QACN,MAAM,qHAAA,CAAA,UAAE,CAAC,KAAK,CAAC,SAAS;YAAE,WAAW;QAAK;IAC5C;AACF;AAGO,eAAe;IACpB,IAAI;QACF,MAAM;QACN,MAAM,cAAc,MAAM,qHAAA,CAAA,UAAE,CAAC,QAAQ,CAAC,WAAW;QACjD,MAAM,OAAO,KAAK,KAAK,CAAC;QAExB,mDAAmD;QACnD,OAAO;YACL,GAAG,WAAW;YACd,GAAG,IAAI;YACP,UAAU;gBACR,GAAG,YAAY,QAAQ;gBACvB,GAAG,KAAK,QAAQ;YAClB;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,GAAG,CAAC;QACZ,MAAM,SAAS;QACf,OAAO;IACT;AACF;AAGO,eAAe,SAAS,IAAgB;IAC7C,IAAI;QACF,MAAM;QACN,MAAM,qHAAA,CAAA,UAAE,CAAC,SAAS,CAAC,WAAW,KAAK,SAAS,CAAC,MAAM,MAAM,IAAI;IAC/D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,MAAM,IAAI,MAAM;IAClB;AACF;AAGO,eAAe;IACpB,MAAM,OAAO,MAAM;IACnB,OAAO,KAAK,KAAK;AACnB;AAEO,eAAe,QAAQ,IAAsB;IAClD,MAAM,OAAO,MAAM;IACnB,MAAM,UAAgB;QACpB,GAAG,IAAI;QACP,IAAI,CAAC,KAAK,EAAE,KAAK,WAAW,EAAE;IAChC;IAEA,KAAK,KAAK,CAAC,IAAI,CAAC;IAChB,KAAK,WAAW,IAAI;IAEpB,MAAM,SAAS;IACf,OAAO;AACT;AAEO,eAAe,WACpB,EAAU,EACV,OAAsB;IAEtB,MAAM,OAAO,MAAM;IACnB,MAAM,YAAY,KAAK,KAAK,CAAC,SAAS,CAAC,CAAC,OAAS,KAAK,EAAE,KAAK;IAE7D,IAAI,cAAc,CAAC,GAAG;QACpB,OAAO;IACT;IAEA,KAAK,KAAK,CAAC,UAAU,GAAG;QACtB,GAAG,KAAK,KAAK,CAAC,UAAU;QACxB,GAAG,OAAO;QACV,WAAW,IAAI,OAAO,WAAW;IACnC;IAEA,MAAM,SAAS;IACf,OAAO,KAAK,KAAK,CAAC,UAAU;AAC9B;AAEO,eAAe,WAAW,EAAU;IACzC,MAAM,OAAO,MAAM;IACnB,MAAM,YAAY,KAAK,KAAK,CAAC,SAAS,CAAC,CAAC,OAAS,KAAK,EAAE,KAAK;IAE7D,IAAI,cAAc,CAAC,GAAG;QACpB,OAAO;IACT;IAEA,MAAM,cAAc,KAAK,KAAK,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,EAAE;IACtD,MAAM,SAAS;IACf,OAAO;AACT;AAEO,eAAe;IACpB,MAAM,OAAO,MAAM;IACnB,MAAM,iBAAiB,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC,OAAS,KAAK,MAAM,KAAK;IACnE,KAAK,KAAK,GAAG,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC,OAAS,KAAK,MAAM,KAAK;IAEzD,MAAM,SAAS;IACf,OAAO;AACT;AAGO,eAAe;IACpB,MAAM,OAAO,MAAM;IACnB,OAAO,KAAK,QAAQ;AACtB;AAEO,eAAe,oBACpB,OAA+B;IAE/B,MAAM,OAAO,MAAM;IACnB,KAAK,QAAQ,GAAG;QACd,GAAG,KAAK,QAAQ;QAChB,GAAG,OAAO;IACZ;IAEA,MAAM,SAAS;IACf,OAAO,KAAK,QAAQ;AACtB","debugId":null}},
    {"offset": {"line": 343, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Raito/Documents/GitHub/twitch-task-bot-next/criss_bot/src/lib/socket.ts"],"sourcesContent":["import { Server as SocketIOServer } from \"socket.io\";\r\nimport { createServer } from \"http\";\r\nimport { ServerToClientEvents, ClientToServerEvents } from \"@/types\";\r\n\r\n// Global Socket.io instance\r\nlet io: SocketIOServer<ClientToServerEvents, ServerToClientEvents> | null =\r\n  null;\r\n\r\nexport function initializeSocketIO(): SocketIOServer<\r\n  ClientToServerEvents,\r\n  ServerToClientEvents\r\n> {\r\n  if (!io) {\r\n    console.log(\"üîå Initializing Socket.io server...\");\r\n\r\n    const httpServer = createServer();\r\n\r\n    io = new SocketIOServer<ClientToServerEvents, ServerToClientEvents>(\r\n      httpServer,\r\n      {\r\n        cors: {\r\n          origin: \"*\",\r\n          methods: [\"GET\", \"POST\"],\r\n        },\r\n        path: \"/socket.io\",\r\n      }\r\n    );\r\n\r\n    // Socket connection handling\r\n    io.on(\"connection\", (socket) => {\r\n      console.log(\"‚úÖ Client connected:\", socket.id);\r\n\r\n      socket.on(\"disconnect\", (reason) => {\r\n        console.log(\"‚ùå Client disconnected:\", socket.id, \"Reason:\", reason);\r\n      });\r\n\r\n      // Handle ping for connection testing\r\n      socket.on(\"ping\", () => {\r\n        socket.emit(\"tasksLoaded\", []); // Example response\r\n      });\r\n    });\r\n\r\n    // Start server on port 3001\r\n    const PORT = parseInt(process.env.SOCKET_PORT || \"3001\");\r\n    httpServer.listen(PORT, () => {\r\n      console.log(`‚úÖ Socket.io server running on port ${PORT}`);\r\n    });\r\n\r\n    console.log(\"‚úÖ Socket.io server initialized\");\r\n  }\r\n\r\n  return io;\r\n}\r\n\r\nexport function getSocketIO(): SocketIOServer<\r\n  ClientToServerEvents,\r\n  ServerToClientEvents\r\n> | null {\r\n  return io;\r\n}\r\n\r\n// Initialize on module load (server-side only)\r\nif (typeof window === \"undefined\") {\r\n  // Only run on server side\r\n  initializeSocketIO();\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGA,4BAA4B;AAC5B,IAAI,KACF;AAEK,SAAS;IAId,IAAI,CAAC,IAAI;QACP,QAAQ,GAAG,CAAC;QAEZ,MAAM,aAAa,CAAA,GAAA,iGAAA,CAAA,eAAY,AAAD;QAE9B,KAAK,IAAI,0IAAA,CAAA,SAAc,CACrB,YACA;YACE,MAAM;gBACJ,QAAQ;gBACR,SAAS;oBAAC;oBAAO;iBAAO;YAC1B;YACA,MAAM;QACR;QAGF,6BAA6B;QAC7B,GAAG,EAAE,CAAC,cAAc,CAAC;YACnB,QAAQ,GAAG,CAAC,uBAAuB,OAAO,EAAE;YAE5C,OAAO,EAAE,CAAC,cAAc,CAAC;gBACvB,QAAQ,GAAG,CAAC,0BAA0B,OAAO,EAAE,EAAE,WAAW;YAC9D;YAEA,qCAAqC;YACrC,OAAO,EAAE,CAAC,QAAQ;gBAChB,OAAO,IAAI,CAAC,eAAe,EAAE,GAAG,mBAAmB;YACrD;QACF;QAEA,4BAA4B;QAC5B,MAAM,OAAO,SAAS,QAAQ,GAAG,CAAC,WAAW,IAAI;QACjD,WAAW,MAAM,CAAC,MAAM;YACtB,QAAQ,GAAG,CAAC,CAAC,mCAAmC,EAAE,MAAM;QAC1D;QAEA,QAAQ,GAAG,CAAC;IACd;IAEA,OAAO;AACT;AAEO,SAAS;IAId,OAAO;AACT;AAEA,+CAA+C;AAC/C,wCAAmC;IACjC,0BAA0B;IAC1B;AACF","debugId":null}},
    {"offset": {"line": 399, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Raito/Documents/GitHub/twitch-task-bot-next/criss_bot/src/app/api/pomodoro/control/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { getPomodoroState, updatePomodoroState } from \"@/lib/storage\";\r\nimport { getSocketIO } from \"@/lib/socket\";\r\nimport { PomodoroControlRequest, PomodoroApiResponse } from \"@/types\";\r\n\r\n// POST - Handle pause, resume, reset actions\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const {\r\n      username,\r\n      action,\r\n    }: PomodoroControlRequest & { action: \"pause\" | \"resume\" | \"reset\" } = body;\r\n\r\n    if (!username) {\r\n      const response: PomodoroApiResponse = {\r\n        success: false,\r\n        error: \"Username is required\",\r\n      };\r\n      return NextResponse.json(response, { status: 400 });\r\n    }\r\n\r\n    if (!action || ![\"pause\", \"resume\", \"reset\"].includes(action)) {\r\n      const response: PomodoroApiResponse = {\r\n        success: false,\r\n        error: \"Valid action is required (pause, resume, reset)\",\r\n      };\r\n      return NextResponse.json(response, { status: 400 });\r\n    }\r\n\r\n    const currentState = await getPomodoroState();\r\n    const io = getSocketIO();\r\n    let newState;\r\n    let message;\r\n\r\n    switch (action) {\r\n      case \"pause\":\r\n        if (!currentState.isActive) {\r\n          const response: PomodoroApiResponse = {\r\n            success: false,\r\n            error: \"No active Pomodoro to pause\",\r\n          };\r\n          return NextResponse.json(response, { status: 400 });\r\n        }\r\n\r\n        newState = await updatePomodoroState({\r\n          isActive: false,\r\n          startTime: null,\r\n        });\r\n\r\n        if (io) io.emit(\"pomodoroPaused\", newState);\r\n        message = \"Pomodoro paused\";\r\n        break;\r\n\r\n      case \"resume\":\r\n        if (currentState.isActive) {\r\n          const response: PomodoroApiResponse = {\r\n            success: false,\r\n            error: \"Pomodoro is already active\",\r\n          };\r\n          return NextResponse.json(response, { status: 400 });\r\n        }\r\n\r\n        if (currentState.timeLeft <= 0) {\r\n          const response: PomodoroApiResponse = {\r\n            success: false,\r\n            error: \"No paused Pomodoro to resume\",\r\n          };\r\n          return NextResponse.json(response, { status: 400 });\r\n        }\r\n\r\n        newState = await updatePomodoroState({\r\n          isActive: true,\r\n          startTime: Date.now(),\r\n        });\r\n\r\n        if (io) io.emit(\"pomodoroResumed\", newState);\r\n        message = \"Pomodoro resumed\";\r\n        break;\r\n\r\n      case \"reset\":\r\n        newState = await updatePomodoroState({\r\n          isActive: false,\r\n          timeLeft: 25 * 60, // 25 minutes\r\n          mode: \"work\",\r\n          startTime: null,\r\n          initiatedBy: username.toLowerCase(),\r\n        });\r\n\r\n        if (io) io.emit(\"pomodoroReset\", newState);\r\n        message = \"Pomodoro reset to 25:00\";\r\n        break;\r\n\r\n      default:\r\n        const response: PomodoroApiResponse = {\r\n          success: false,\r\n          error: \"Invalid action\",\r\n        };\r\n        return NextResponse.json(response, { status: 400 });\r\n    }\r\n\r\n    const response: PomodoroApiResponse = {\r\n      success: true,\r\n      data: newState,\r\n      message,\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error(\"‚ùå Pomodoro control error:\", error);\r\n    const response: PomodoroApiResponse = {\r\n      success: false,\r\n      error: \"Failed to control Pomodoro\",\r\n    };\r\n    return NextResponse.json(response, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAIO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EACJ,QAAQ,EACR,MAAM,EACP,GAAsE;QAEvE,IAAI,CAAC,UAAU;YACb,MAAM,WAAgC;gBACpC,SAAS;gBACT,OAAO;YACT;YACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU;gBAAE,QAAQ;YAAI;QACnD;QAEA,IAAI,CAAC,UAAU,CAAC;YAAC;YAAS;YAAU;SAAQ,CAAC,QAAQ,CAAC,SAAS;YAC7D,MAAM,WAAgC;gBACpC,SAAS;gBACT,OAAO;YACT;YACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU;gBAAE,QAAQ;YAAI;QACnD;QAEA,MAAM,eAAe,MAAM,CAAA,GAAA,uHAAA,CAAA,mBAAgB,AAAD;QAC1C,MAAM,KAAK,CAAA,GAAA,sHAAA,CAAA,cAAW,AAAD;QACrB,IAAI;QACJ,IAAI;QAEJ,OAAQ;YACN,KAAK;gBACH,IAAI,CAAC,aAAa,QAAQ,EAAE;oBAC1B,MAAM,WAAgC;wBACpC,SAAS;wBACT,OAAO;oBACT;oBACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU;wBAAE,QAAQ;oBAAI;gBACnD;gBAEA,WAAW,MAAM,CAAA,GAAA,uHAAA,CAAA,sBAAmB,AAAD,EAAE;oBACnC,UAAU;oBACV,WAAW;gBACb;gBAEA,IAAI,IAAI,GAAG,IAAI,CAAC,kBAAkB;gBAClC,UAAU;gBACV;YAEF,KAAK;gBACH,IAAI,aAAa,QAAQ,EAAE;oBACzB,MAAM,WAAgC;wBACpC,SAAS;wBACT,OAAO;oBACT;oBACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU;wBAAE,QAAQ;oBAAI;gBACnD;gBAEA,IAAI,aAAa,QAAQ,IAAI,GAAG;oBAC9B,MAAM,WAAgC;wBACpC,SAAS;wBACT,OAAO;oBACT;oBACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU;wBAAE,QAAQ;oBAAI;gBACnD;gBAEA,WAAW,MAAM,CAAA,GAAA,uHAAA,CAAA,sBAAmB,AAAD,EAAE;oBACnC,UAAU;oBACV,WAAW,KAAK,GAAG;gBACrB;gBAEA,IAAI,IAAI,GAAG,IAAI,CAAC,mBAAmB;gBACnC,UAAU;gBACV;YAEF,KAAK;gBACH,WAAW,MAAM,CAAA,GAAA,uHAAA,CAAA,sBAAmB,AAAD,EAAE;oBACnC,UAAU;oBACV,UAAU,KAAK;oBACf,MAAM;oBACN,WAAW;oBACX,aAAa,SAAS,WAAW;gBACnC;gBAEA,IAAI,IAAI,GAAG,IAAI,CAAC,iBAAiB;gBACjC,UAAU;gBACV;YAEF;gBACE,MAAM,WAAgC;oBACpC,SAAS;oBACT,OAAO;gBACT;gBACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU;oBAAE,QAAQ;gBAAI;QACrD;QAEA,MAAM,YAAgC;YACpC,SAAS;YACT,MAAM;YACN;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM,WAAgC;YACpC,SAAS;YACT,OAAO;QACT;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU;YAAE,QAAQ;QAAI;IACnD;AACF","debugId":null}}]
}